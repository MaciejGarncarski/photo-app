generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id @unique
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  userId           String        @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String?
  emailverified    DateTime?     @db.Timestamptz(6)
  name             String?       @db.VarChar(50)
  password         String?       @db.VarChar(200)
  username         String?       @unique(map: "username_unique") @db.VarChar(50)
  bio              String?
  createdAt        DateTime      @default(now()) @db.Timestamptz(6)
  avatarUrl        String?
  Account          Account[]
  receiver         ChatRoom[]    @relation("UserTwo")
  sender           ChatRoom[]    @relation("UserOne")
  commentLike      CommentLike[]
  fromUser         Follower[]    @relation("Follower")
  toUser           Follower[]    @relation("Following")
  receivedMessages Message[]     @relation("Received")
  sentMessages     Message[]     @relation("Sent")
  Post             Post[]
  postsComments    PostComment[]
  postsLikes       PostLike[]

  @@index([username])
}

model Post {
  id            Int           @id @unique @default(autoincrement())
  authorId      String        @db.Uuid
  description   String
  createdAt     DateTime      @default(now()) @db.Timestamp(0)
  author        User          @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  postsComments PostComment[]
  images        PostImage[]
  postsLikes    PostLike[]

  @@index([authorId])
}

model PostImage {
  id     Int    @id @unique @default(autoincrement())
  fileId String
  name   String
  url    String
  width  Int
  height Int
  size   Int
  postId Int?
  post   Post?  @relation(fields: [postId], references: [id])

  @@index([postId])
}

model PostLike {
  id     Int    @id @unique @default(autoincrement())
  postId Int
  userId String @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model PostComment {
  id          Int           @id @unique @default(autoincrement())
  postId      Int
  createdAt   DateTime      @default(now()) @db.Timestamp(0)
  text        String
  userId      String        @db.Uuid
  commentLike CommentLike[]
  post        Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model CommentLike {
  id        Int         @id @unique @default(autoincrement())
  commentId Int
  userId    String      @db.Uuid
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([commentId])
  @@index([userId])
}

model Follower {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)
  from      String   @db.Uuid
  to        String   @db.Uuid
  fromUser  User     @relation("Follower", fields: [from], references: [userId], onDelete: Cascade)
  toUser    User     @relation("Following", fields: [to], references: [userId], onDelete: Cascade)

  @@index([to])
  @@index([from])
}

model ChatRoom {
  id         Int       @id @unique @default(autoincrement())
  senderId   String    @db.Uuid
  receiverId String    @db.Uuid
  userTwo    User      @relation("UserTwo", fields: [receiverId], references: [userId], onDelete: Cascade)
  sender     User      @relation("UserOne", fields: [senderId], references: [userId], onDelete: Cascade)
  messages   Message[] @relation("Chatroom")

  @@index([senderId])
  @@index([receiverId])
}

model Message {
  text       String
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  chatroomId Int
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  id         String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatroom   ChatRoom @relation("Chatroom", fields: [chatroomId], references: [id])
  receiver   User     @relation("Received", fields: [receiverId], references: [userId], onDelete: Cascade)
  sender     User     @relation("Sent", fields: [senderId], references: [userId], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([chatroomId])
}

enum Role {
  USER
  ADMIN
}
