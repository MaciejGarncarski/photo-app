/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';
import { setupServer } from 'msw/node';

faker.seed(1);

const baseURL = 'http://localhost:3001';
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/ping`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/sign-in`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostAuthSignIn200Response())],
      [ctx.status(400), ctx.json(getPostAuthSignIn400Response())],
      [ctx.status(404), ctx.json(getPostAuthSignIn404Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/register`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostAuthRegister200Response())],
      [ctx.status(400), ctx.json(getPostAuthRegister400Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/me`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetAuthMe200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/auth/me`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/follower-stats/followers`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetFollowerStatsFollowers200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/follower-stats/friends`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetFollowerStatsFriends200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/posts`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(getGetPosts200Response())]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/posts`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/posts/user/:authorId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetPostsUserAuthorId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/posts/:postId/edit`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/posts/:postId`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/posts/:postId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetPostsPostId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/posts/:postId/like`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/posts/:postId/like`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/post/comment`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostPostComment200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/post/comment/:commentId`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/post/:postId/comments`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetPostPostIdComments200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/post/comment/:commentId/like`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/post/comment/:commentId/like`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/user/edit`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/user/avatar`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/avatar`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/:userId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUserUserId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/username/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUserUsernameUsername200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/:userId/follow`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/:userId/follow`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/chat/check-user/:receiverId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetChatCheckUserReceiverId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/chat/messages/:receiverId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetChatMessagesReceiverId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/chat/users`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetChatUsers200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/chat/message`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/chat/message/:messageId`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/google`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/google/callback`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

export function getPostAuthSignIn200Response() {
  return {
    data: {
      username: faker.person.fullName(),
      name: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      id: faker.lorem.slug(1),
      image: faker.helpers.arrayElement([faker.internet.url(), null]),
      customImage: faker.helpers.arrayElement([faker.internet.url(), null]),
      bio: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      createdAt: faker.lorem.slug(1),
    },
  };
}

export function getPostAuthSignIn400Response() {
  return {
    statusCode: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
    error: faker.lorem.slug(1),
  };
}

export function getPostAuthSignIn404Response() {
  return {
    statusCode: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
    error: faker.lorem.slug(1),
  };
}

export function getPostAuthRegister200Response() {
  return {
    data: {
      username: faker.person.fullName(),
      name: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      id: faker.lorem.slug(1),
      image: faker.helpers.arrayElement([faker.internet.url(), null]),
      customImage: faker.helpers.arrayElement([faker.internet.url(), null]),
      bio: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      createdAt: faker.lorem.slug(1),
    },
  };
}

export function getPostAuthRegister400Response() {
  return {
    statusCode: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
    error: faker.lorem.slug(1),
  };
}

export function getGetAuthMe200Response() {
  return {
    data: {
      username: faker.person.fullName(),
      name: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      id: faker.lorem.slug(1),
      image: faker.helpers.arrayElement([faker.internet.url(), null]),
      customImage: faker.helpers.arrayElement([faker.internet.url(), null]),
      bio: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      createdAt: faker.lorem.slug(1),
      theme: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['LIGHT']),
        faker.helpers.arrayElement(['DARK']),
      ]),
      notificationSound: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['ON']),
        faker.helpers.arrayElement(['OFF']),
      ]),
    },
  };
}

export function getDeleteAuthMe204Response() {
  return {};
}

export function getGetFollowerStatsFollowers200Response() {
  return {
    data: {
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.slug(1)),
      totalPages: faker.number.int({ min: undefined, max: undefined }),
      currentPage: faker.number.int({ min: undefined, max: undefined }),
      usersCount: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetFollowerStatsFriends200Response() {
  return {
    data: {
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.slug(1)),
      totalPages: faker.number.int({ min: undefined, max: undefined }),
      currentPage: faker.number.int({ min: undefined, max: undefined }),
      usersCount: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetPosts200Response() {
  return {
    postsCount: faker.number.int({ min: undefined, max: undefined }),
    totalPages: faker.number.int({ min: undefined, max: undefined }),
    currentPage: faker.number.int({ min: undefined, max: undefined }),
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      createdAt: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      authorId: faker.lorem.slug(1),
    })),
  };
}

export function getGetPostsUserAuthorId200Response() {
  return {
    postsCount: faker.number.int({ min: undefined, max: undefined }),
    totalPages: faker.number.int({ min: undefined, max: undefined }),
    currentPage: faker.number.int({ min: undefined, max: undefined }),
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      createdAt: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      authorId: faker.lorem.slug(1),
    })),
  };
}

export function getDeletePostsPostId204Response() {
  return {};
}

export function getGetPostsPostId200Response() {
  return {
    data: {
      commentsCount: faker.number.int({ min: undefined, max: undefined }),
      likesCount: faker.number.int({ min: undefined, max: undefined }),
      images: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: faker.number.int({ min: undefined, max: undefined }),
        fileId: faker.lorem.slug(1),
        name: faker.person.fullName(),
        url: faker.internet.url(),
        thumbnailUrl: faker.internet.url(),
        width: faker.number.int({ min: undefined, max: undefined }),
        height: faker.number.int({ min: undefined, max: undefined }),
        size: faker.number.int({ min: undefined, max: undefined }),
      })),
      createdAt: faker.lorem.slug(1),
      description: faker.lorem.slug(1),
      id: faker.number.int({ min: undefined, max: undefined }),
      isLiked: faker.datatype.boolean(),
      authorId: faker.lorem.slug(1),
    },
  };
}

export function getDeletePostsPostIdLike204Response() {
  return {};
}

export function getPostPostComment200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      userId: faker.lorem.slug(1),
      postId: faker.number.int({ min: undefined, max: undefined }),
      createdAt: faker.lorem.slug(1),
      text: faker.lorem.slug(1),
    },
  };
}

export function getDeletePostCommentCommentId204Response() {
  return {};
}

export function getGetPostPostIdComments200Response() {
  return {
    data: {
      comments: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        text: faker.lorem.slug(1),
        createdAt: faker.lorem.slug(1),
        likesCount: faker.number.int({ min: undefined, max: undefined }),
        isLiked: faker.datatype.boolean(),
        postId: faker.number.int({ min: undefined, max: undefined }),
        commentId: faker.number.int({ min: undefined, max: undefined }),
        authorId: faker.lorem.slug(1),
      })),
      commentsCount: faker.number.int({ min: undefined, max: undefined }),
      totalPages: faker.number.int({ min: undefined, max: undefined }),
      currentPage: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getPostPostCommentCommentIdLike204Response() {
  return {};
}

export function getDeletePostCommentCommentIdLike204Response() {
  return {};
}

export function getDeleteUserAvatar204Response() {
  return {};
}

export function getGetUserUserId200Response() {
  return {
    data: {
      username: faker.person.fullName(),
      name: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      id: faker.lorem.slug(1),
      image: faker.helpers.arrayElement([faker.internet.url(), null]),
      customImage: faker.helpers.arrayElement([faker.internet.url(), null]),
      bio: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      createdAt: faker.lorem.slug(1),
      postsCount: faker.number.int({ min: undefined, max: undefined }),
      followersCount: faker.number.int({ min: undefined, max: undefined }),
      friendsCount: faker.number.int({ min: undefined, max: undefined }),
      isFollowing: faker.datatype.boolean(),
    },
  };
}

export function getGetUserUsernameUsername200Response() {
  return {
    data: {
      username: faker.person.fullName(),
      name: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      id: faker.lorem.slug(1),
      image: faker.helpers.arrayElement([faker.internet.url(), null]),
      customImage: faker.helpers.arrayElement([faker.internet.url(), null]),
      bio: faker.helpers.arrayElement([faker.lorem.slug(1), null]),
      createdAt: faker.lorem.slug(1),
      postsCount: faker.number.int({ min: undefined, max: undefined }),
      followersCount: faker.number.int({ min: undefined, max: undefined }),
      friendsCount: faker.number.int({ min: undefined, max: undefined }),
      isFollowing: faker.datatype.boolean(),
    },
  };
}

export function getPostUserUserIdFollow204Response() {
  return {};
}

export function getDeleteUserUserIdFollow204Response() {
  return {};
}

export function getGetChatCheckUserReceiverId200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      senderId: faker.lorem.slug(1),
      receiverId: faker.lorem.slug(1),
    },
  };
}

export function getGetChatMessagesReceiverId200Response() {
  return {
    data: {
      messages: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        senderId: faker.lorem.slug(1),
        receiverId: faker.lorem.slug(1),
        text: faker.lorem.slug(1),
        createdAt: faker.lorem.slug(1),
        id: faker.lorem.slug(1),
      })),
      totalPages: faker.number.int({ min: undefined, max: undefined }),
      currentPage: faker.number.int({ min: undefined, max: undefined }),
      messagesCount: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetChatUsers200Response() {
  return {
    data: {
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: faker.lorem.slug(1),
        message: faker.lorem.slug(1),
        messageCreatedAt: faker.helpers.arrayElement([
          faker.lorem.slug(1),
          null,
        ]),
      })),
      totalPages: faker.number.int({ min: undefined, max: undefined }),
      currentPage: faker.number.int({ min: undefined, max: undefined }),
      usersCount: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getDeleteChatMessageMessageId204Response() {
  return {};
}

// This configures a Service Worker with the given request handlers.

export const server = setupServer(...handlers);

export const startWorker = () => {
  server.listen();
};
