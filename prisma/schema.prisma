datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts          Post[]
  posts_likes    PostLike[]
  posts_comments PostComments[]

    fromUser Follower[] @relation("Follower")
  toUser   Follower[] @relation("Following")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             Int              @id @default(autoincrement()) @db.Integer
  author         User         @relation(fields: [author_id], references: [id])
  author_id      String           
  description    String
  created_at     DateTime         @default(now()) @db.Timestamptz()
  images            String
  file_id String?
  location       String?
  posts_likes    PostLike[]
  posts_comments PostComments[]
  post_saved     SavedPost[]
}

model SavedPost {
    id             Int              @id @default(autoincrement()) @db.Integer
    post    Post    @relation(fields: [post_id], references: [id])
    post_id Int      @default(autoincrement()) @db.Integer
}

model PostLike {
  id      Int      @id @default(autoincrement()) @db.Integer
  post    Post    @relation(fields: [post_id], references: [id])
  post_id Int      @default(autoincrement()) @db.Integer
  user    User @relation(fields: [user_id], references: [id])
  user_id String  
}

model PostComments {
  id           Int      @id @default(autoincrement()) @db.Integer
  user         User @relation(fields: [user_id], references: [id])
  user_id      String
  post         Post    @relation(fields: [post_id], references: [id])
  post_id      Int      @db.Integer
  created_at   DateTime @default(now()) @db.Timestamptz()
  comment_text String   @db.Text
}

enum Role {
  USER
  ADMIN
}

model Follower {
  id         Int      @id @default(autoincrement()) @db.Integer
  from_user  User @relation(fields: [from], references: [id], name: "Follower")
  from       String   
  to_user    User @relation(fields: [to], references: [id], name: "Following")
  to         String   
  created_at DateTime @default(now()) @db.Timestamptz()
}