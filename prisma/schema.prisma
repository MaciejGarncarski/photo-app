datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id      String   @id @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  email          String?       @unique
  emailVerified  DateTime?
  name           String?
  password       String?
  username       String?       @default(cuid())
  bio            String?
  image          String?
  customImage    String?
  role           Role          @default(USER)
  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  posts_likes    PostLike[]
  posts_comments PostComment[]
  fromUser       Follower[]    @relation("Follower")
  toUser         Follower[]    @relation("Following")
  created_at     DateTime      @default(now()) @db.Timestamp(0)
  CommentLike    CommentLike[]

  sentMessages     Message[] @relation("Sent")
  receivedMessages Message[] @relation("Received")

  sender ChatRoom[] @relation("UserOne")
  receiver ChatRoom[] @relation("UserTwo")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             Int           @id @default(autoincrement()) @db.Int
  author         User          @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id      String
  description    String        @db.MediumText
  created_at     DateTime      @default(now()) @db.Timestamp(0)
  images         PostImage[]
  posts_likes    PostLike[]
  posts_comments PostComment[]
  post_saved     SavedPost[]

  @@index([author_id])
}

model PostImage {
  id           Int    @id @default(autoincrement()) @db.Int
  fileId       String
  name         String
  url          String
  thumbnailUrl String
  width        Int
  height       Int
  size         Int

  Post   Post? @relation(fields: [postId], references: [id])
  postId Int?  @db.Int

  @@index([postId])
}

model SavedPost {
  id      Int  @id @default(autoincrement()) @db.Int
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id Int  @db.Int

  @@index([post_id])
}

model PostLike {
  id      Int    @id @default(autoincrement()) @db.Int
  post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id Int    @db.Int
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@index([post_id])
  @@index([user_id])
}

model PostComment {
  id           Int           @id @default(autoincrement()) @db.Int
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String
  post         Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id      Int           @db.Int
  created_at   DateTime      @default(now()) @db.Timestamp(0)
  comment_text String        @db.Text
  CommentLike  CommentLike[]

  @@index([user_id])
  @@index([post_id])
}

model CommentLike {
  id         Int         @id @default(autoincrement()) @db.Int
  comment    PostComment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  comment_id Int         @db.Int
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String

  @@index([comment_id])
  @@index([user_id])
}

enum Role {
  USER
  ADMIN
}

model Follower {
  id         Int      @id @default(autoincrement()) @db.Int
  from_user  User     @relation(fields: [from], references: [id], name: "Follower", onDelete: Cascade)
  from       String
  to_user    User     @relation(fields: [to], references: [id], name: "Following", onDelete: Cascade)
  to         String
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@index([to])
  @@index([from])
}

model ChatRoom {
  id         Int    @id @default(autoincrement()) @db.Int
  sender    User   @relation(fields: [sender_id], references: [id], name: "UserOne", onDelete: Cascade)
  sender_id String
  userTwo    User   @relation(fields: [receiver_id], references: [id], name: "UserTwo", onDelete: Cascade)
  receiver_id String
  messages Message[] @relation("Chatroom")

  @@index([sender_id])
  @@index([receiver_id])
}

model Message {
  id          String   @id @default(cuid())
  text        String
  sender_id     String
  sender  User     @relation(fields: [sender_id], references: [id], name: "Sent", onDelete: Cascade)
  receiver_id    String
  receiver User     @relation(fields: [receiver_id], references: [id], name: "Received", onDelete: Cascade)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  chatroom    ChatRoom @relation(fields: [chatroom_id], references: [id], name: "Chatroom")
  chatroom_id Int

  @@index([sender_id])
  @@index([receiver_id])
  @@index([chatroom_id])
}
